{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tj-bu-702-24\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uBC15\\uC9C0\\uC740\\\\REACT\\\\calc\\\\src\\\\components\\\\compbmi\\\\CompBmi.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport CompForm from './CompForm';\nimport CompResult from './CompResult';\nimport { fnSetObj } from '../../js/bmi';\n\n/* 메인 컴포넌트*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BMIContext = /*#__PURE__*/createContext();\nconst CompBmi = () => {\n  _s();\n  const [_active, _setActive] = useState(''); /* _active 스테이트를 변경하는 함수, secActive(`active`) 로 할 경우 결과화면이 나온다. */\n  const [_gender, _setGender] = useState(); /* 남녀 스테이트를 변경하는 함수 (male,female) 체크, 라디오버튼(value를 넣어놓고) change할때마다 스테이트 변경이 일어남. _secGender(e.target.value)를 이용*/\n  const [_chkObj, _setChkObj] = useState(fnSetObj(0)); /* 남,녀 라디오버튼 체크 상태 state. fnSetObj(n) 함수를 이용해서 n번째 버튼의 check값만 true로 전달. 1이나 2를 입력하면 male이나 female이 눌려진 상태가 디폴트로 설정됨 */\n  const [_cm, _setCm] = useState(''); // cm 스테이트, input에 값이 입력될때마다 input의 value값으로 변경\n  const [_kg, _setKg] = useState(''); // kg 스테이트, input에 값이 입력될때마다 input의 value값으로 변경\n  const [_bmiResultObj, _setBmiResultObj] = useState({});\n  return /*#__PURE__*/_jsxDEV(BMIContext.Provider, {\n    value: {\n      _active,\n      _setActive,\n      _gender,\n      _setGender,\n      _cm,\n      _setCm,\n      _kg,\n      _setKg,\n      _chkObj,\n      _setChkObj,\n      _bmiResultObj,\n      _setBmiResultObj\n    },\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bmi\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"bmi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CompForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CompResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(CompBmi, \"mGyxbLEdm2vy3qQS6OU7lWuJ6do=\");\n_c = CompBmi;\nexport default CompBmi;\nvar _c;\n$RefreshReg$(_c, \"CompBmi\");","map":{"version":3,"names":["React","createContext","useState","CompForm","CompResult","fnSetObj","jsxDEV","_jsxDEV","BMIContext","CompBmi","_s","_active","_setActive","_gender","_setGender","_chkObj","_setChkObj","_cm","_setCm","_kg","_setKg","_bmiResultObj","_setBmiResultObj","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tj-bu-702-24/OneDrive/바탕 화면/박지은/REACT/calc/src/components/compbmi/CompBmi.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport CompForm from './CompForm';\r\nimport CompResult from './CompResult';\r\nimport { fnSetObj } from '../../js/bmi';\r\n\r\n/* 메인 컴포넌트*/\r\n\r\nexport const BMIContext = createContext()\r\n\r\nconst CompBmi = () => {\r\n  const [_active, _setActive] = useState('')   /* _active 스테이트를 변경하는 함수, secActive(`active`) 로 할 경우 결과화면이 나온다. */\r\n  const [_gender, _setGender] = useState() /* 남녀 스테이트를 변경하는 함수 (male,female) 체크, 라디오버튼(value를 넣어놓고) change할때마다 스테이트 변경이 일어남. _secGender(e.target.value)를 이용*/\r\n  const [_chkObj, _setChkObj] = useState(fnSetObj(0)) /* 남,녀 라디오버튼 체크 상태 state. fnSetObj(n) 함수를 이용해서 n번째 버튼의 check값만 true로 전달. 1이나 2를 입력하면 male이나 female이 눌려진 상태가 디폴트로 설정됨 */\r\n  const [_cm, _setCm] = useState('')  // cm 스테이트, input에 값이 입력될때마다 input의 value값으로 변경\r\n  const [_kg, _setKg] = useState('')  // kg 스테이트, input에 값이 입력될때마다 input의 value값으로 변경\r\n  const [_bmiResultObj, _setBmiResultObj] = useState({}) \r\n  \r\n\r\n  return (\r\n    <BMIContext.Provider value={{\r\n      _active,_setActive,\r\n      _gender,_setGender,\r\n      _cm,_setCm,\r\n      _kg, _setKg,\r\n      _chkObj, _setChkObj,\r\n      _bmiResultObj, _setBmiResultObj,\r\n      }}>\r\n        \r\n      <section className='bmi'>\r\n        <h2>bmi</h2>\r\n        <CompForm />\r\n        <CompResult />\r\n      </section>\r\n    </BMIContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CompBmi;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,UAAU,gBAAGP,aAAa,CAAC,CAAC;AAEzC,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,EAAG;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,EAAC;EACzC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC;EACpD,MAAM,CAACY,GAAG,EAAEC,MAAM,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,EAAE;EACpC,MAAM,CAACiB,GAAG,EAAEC,MAAM,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,EAAE;EACpC,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAGtD,oBACEK,OAAA,CAACC,UAAU,CAACe,QAAQ;IAACC,KAAK,EAAE;MAC1Bb,OAAO;MAACC,UAAU;MAClBC,OAAO;MAACC,UAAU;MAClBG,GAAG;MAACC,MAAM;MACVC,GAAG;MAAEC,MAAM;MACXL,OAAO;MAAEC,UAAU;MACnBK,aAAa;MAAEC;IACf,CAAE;IAAAG,QAAA,eAEFlB,OAAA;MAASmB,SAAS,EAAC,KAAK;MAAAD,QAAA,gBACtBlB,OAAA;QAAAkB,QAAA,EAAI;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACZvB,OAAA,CAACJ,QAAQ;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZvB,OAAA,CAACH,UAAU;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE1B,CAAC;AAACpB,EAAA,CA1BID,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AA4Bb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}