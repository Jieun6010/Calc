{"ast":null,"code":"export const fnGetDateInfo = function (yymmdd) {\n  let dday = new Date(yymmdd); // new Date(`2024-01-01T00:00`)\n  let dayArr = ['sun', 'mon', 'tue', 'wed', 'thr', 'fri', 'sat'];\n  let day = dayArr[dday.getDay()];\n  let year = dday.getFullYear();\n  let month = dday.getMonth() + 1;\n  month = month < 10 ? '0' + month : month;\n  let date = dday.getDate();\n  date = date < 10 ? '0' + date : date;\n  let ap = dday.getHours() < 12 ? 'AM' : 'PM';\n  let hour = dday.getHours() <= 12 ? dday.getHours() : dday.getHours() - 12;\n  hour = hour < 10 ? '0' + hour : hour;\n  let min = dday.getMinutes();\n  min = min < 10 ? '0' + min : min;\n  let sec = dday.getSeconds();\n  sec = sec < 10 ? '0' + sec : sec;\n  let timeStamp = dday.getTime();\n  return {\n    day,\n    year,\n    month,\n    date,\n    ap,\n    hour,\n    min,\n    sec,\n    timeStamp\n  };\n}; // fnGetDateInfo\n\n/* 로컬스토리지에 값이 있는지 없는지 알아보기 */\nexport const fnDdayArrInit = function () {\n  /* 로컬스토리지에 값 가져오기 */\n  let ddayArrStorage = localStorage.getItem('ddayArrStorage');\n  /* ddayArrStorage가 트루라면 JSON.parse로 바꿔서 ddayArr에 넣고, false면 빈 배열을 출력하기*/\n  let ddayArr = ddayArrStorage ?\n  // 사용자 dday배열이 로컬스토리지에 존재한다면\n  JSON.parse(ddayArrStorage) // 로컬스토리지 배열을 리턴한다.\n  :\n  //사용자 dday배열이 로컬스토리지에 없다면\n  [{\n    id: Date.now(),\n    title: ' 새해 (Sample data)',\n    Dday: new Date().getFullYear() + 1 + '-01-01T00:00' // 다음년도 1월1일\n  }];\n\n  return ddayArr;\n}; // fnDdayArrInit\n\n/*  */\nexport const fnTimer = function (DdayTimeStamp) {\n  let diffTimeStamp = DdayTimeStamp - Date.now();\n  let diffSec = parseInt(diffTimeStamp / 1000); // 1초를 1000으로 계산하니까 나눠야한다.\n  let remain;\n  let remainDays = parseInt(diffSec / (60 * 60 * 24));\n  remain = parseInt(diffSec % (60 * 60 * 24));\n  let remainHours = parseInt(remain / (60 * 60));\n  remain = parseInt(remain % (60 * 60));\n  let remainMinutes = parseInt(remain / 60);\n  let remainSecs = parseInt(remain % 60); // 더이상 나눌 수 없음 / 최종적으로 구해진 값 ! 초\n  if (diffTimeStamp < 0) {\n    remainDays = 0;\n    remainHours = 0;\n    remainMinutes = 0;\n    remainSecs = 0;\n  }\n  return {\n    remainDays,\n    remainHours,\n    remainMinutes,\n    remainSecs\n  };\n}; // fnTimer","map":{"version":3,"names":["fnGetDateInfo","yymmdd","dday","Date","dayArr","day","getDay","year","getFullYear","month","getMonth","date","getDate","ap","getHours","hour","min","getMinutes","sec","getSeconds","timeStamp","getTime","fnDdayArrInit","ddayArrStorage","localStorage","getItem","ddayArr","JSON","parse","id","now","title","Dday","fnTimer","DdayTimeStamp","diffTimeStamp","diffSec","parseInt","remain","remainDays","remainHours","remainMinutes","remainSecs"],"sources":["C:/Users/82106/Desktop/calc/src/js/dday.js"],"sourcesContent":["export const fnGetDateInfo = function (yymmdd) {\r\n  let dday = new Date(yymmdd) // new Date(`2024-01-01T00:00`)\r\n  let dayArr = ['sun', 'mon', 'tue', 'wed', 'thr', 'fri', 'sat']\r\n  let day = dayArr[dday.getDay()]\r\n  let year = dday.getFullYear()\r\n  let month = dday.getMonth() + 1\r\n  month = (month < 10) ? '0' + month : month\r\n  let date = dday.getDate()\r\n  date = (date < 10) ? '0' + date : date\r\n  let ap = (dday.getHours() < 12) ? 'AM' : 'PM'\r\n  let hour = (dday.getHours() <= 12) ? dday.getHours() : dday.getHours() - 12\r\n  hour = (hour < 10) ? '0' + hour : hour\r\n  let min = dday.getMinutes()\r\n  min = (min < 10) ? '0' + min : min\r\n  let sec = dday.getSeconds()\r\n  sec = (sec < 10) ? '0' + sec : sec\r\n  let timeStamp = dday.getTime()\r\n\r\n  return { day, year, month, date, ap, hour, min, sec, timeStamp }\r\n} // fnGetDateInfo\r\n\r\n\r\n/* 로컬스토리지에 값이 있는지 없는지 알아보기 */\r\nexport const fnDdayArrInit = function () {\r\n  /* 로컬스토리지에 값 가져오기 */\r\n  let ddayArrStorage = localStorage.getItem('ddayArrStorage')\r\n  /* ddayArrStorage가 트루라면 JSON.parse로 바꿔서 ddayArr에 넣고, false면 빈 배열을 출력하기*/\r\n  let ddayArr = (ddayArrStorage)\r\n    ? // 사용자 dday배열이 로컬스토리지에 존재한다면\r\n    JSON.parse(ddayArrStorage) // 로컬스토리지 배열을 리턴한다.\r\n    : //사용자 dday배열이 로컬스토리지에 없다면\r\n    [\r\n      {\r\n        id: Date.now(),\r\n        title: ' 새해 (Sample data)',\r\n        Dday: new Date().getFullYear() + 1 + '-01-01T00:00' // 다음년도 1월1일\r\n      },\r\n    ]\r\n  return ddayArr\r\n} // fnDdayArrInit\r\n\r\n/*  */\r\nexport const fnTimer = function (DdayTimeStamp) {\r\n  let diffTimeStamp = DdayTimeStamp - Date.now()\r\n  let diffSec = parseInt(diffTimeStamp / 1000) // 1초를 1000으로 계산하니까 나눠야한다.\r\n  let remain\r\n  let remainDays = parseInt(diffSec / (60 * 60 * 24))\r\n  remain = parseInt(diffSec % (60 * 60 * 24))\r\n  let remainHours = parseInt(remain / (60 * 60))\r\n  remain = parseInt(remain % (60 * 60))\r\n  let remainMinutes = parseInt(remain / 60)\r\n  let remainSecs = parseInt(remain % 60) // 더이상 나눌 수 없음 / 최종적으로 구해진 값 ! 초\r\n  if (diffTimeStamp < 0) {\r\n    remainDays = 0; remainHours = 0; remainMinutes = 0; remainSecs = 0\r\n  }\r\n\r\n  return { remainDays, remainHours, remainMinutes, remainSecs }\r\n} // fnTimer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}